# .github/workflows/spanish-learning-automation.yml
name: 스페인어 학습 자료 자동 수집

on:
  schedule:
    # 매일 UTC 23:00 (한국시간 오전 8시)에 실행
    - cron: "0 23 * * 1-5" # 평일만 실행
  workflow_dispatch: # 수동 실행 가능

env:
  NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
  NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}

jobs:
  collect-learning-materials:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 feedparser python-dateutil lxml

      - name: Calculate learning phase and schedule
        id: phase
        run: |
          python3 << 'EOF'
          import os
          from datetime import datetime, timedelta

          # 학습 시작일 (2025-07-01)
          start_date = datetime(2025, 7, 1)
          current_date = datetime.now()

          # 주차 계산
          week_num = (current_date - start_date).days // 7 + 1
          weekday = current_date.weekday()  # 0=월요일

          # 독해 소스 결정
          if week_num <= 2:
              reading_source = "20minutos"
              reading_url = "https://www.20minutos.es/"
              reading_difficulty = "B2"
          elif week_num <= 4:
              reading_source = "El País 단신"
              reading_url = "https://elpais.com/"
              reading_difficulty = "B2"
          else:
              reading_source = "El País 사설"
              reading_url = "https://elpais.com/opinion/"
              reading_difficulty = "C1"
              
          # 팟캐스트 일정 (RSS 피드와 Apple Podcasts 링크)
          podcast_schedule = {
              0: {
                  "name": "Hoy Hablamos",
                  "rss": "https://feeds.feedburner.com/hoyhablamos",
                  "apple_base": "https://podcasts.apple.com/kr/podcast/hoy-hablamos-podcast-diario-para-aprender-español-learn/id1201483158",
                  "region": "스페인",
                  "backup_url": "https://www.hoyhablamos.com/"
              },
              1: {
                  "name": "Radio Ambulante", 
                  "rss": "https://feeds.npr.org/510311/podcast.xml",
                  "apple_base": "https://podcasts.apple.com/kr/podcast/radio-ambulante/id527614348",
                  "region": "중남미",
                  "backup_url": "https://radioambulante.org/"
              },
              2: {
                  "name": "Advanced Spanish",
                  "rss": "https://feeds.buzzsprout.com/1829091.rss", 
                  "apple_base": "https://podcasts.apple.com/kr/podcast/advanced-spanish-podcast-español-avanzado/id1632291264",
                  "region": "스페인",
                  "backup_url": "https://www.spanishlanguagecoach.com/podcast/"
              },
              3: {
                  "name": "Radio Ambulante",
                  "rss": "https://feeds.npr.org/510311/podcast.xml",
                  "apple_base": "https://podcasts.apple.com/kr/podcast/radio-ambulante/id527614348", 
                  "region": "중남미",
                  "backup_url": "https://radioambulante.org/"
              },
              4: {
                  "name": "DELE Podcast",
                  "rss": "https://anchor.fm/s/f4f4a4f0/podcast/rss",
                  "apple_base": "https://podcasts.apple.com/us/podcast/examen-dele/id1705001626",
                  "region": "스페인", 
                  "backup_url": "https://anchor.fm/examen-dele"
              }
          }

          podcast_info = podcast_schedule.get(weekday, podcast_schedule[0])

          # GitHub Actions 환경변수로 출력
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"week_num={week_num}\n")
              f.write(f"reading_source={reading_source}\n")
              f.write(f"reading_url={reading_url}\n")
              f.write(f"reading_difficulty={reading_difficulty}\n")
              f.write(f"podcast_name={podcast_info['name']}\n")
              f.write(f"podcast_rss={podcast_info['rss']}\n")
              f.write(f"podcast_apple_base={podcast_info['apple_base']}\n")
              f.write(f"podcast_region={podcast_info['region']}\n")
              f.write(f"podcast_backup={podcast_info['backup_url']}\n")
              f.write(f"date={current_date.strftime('%Y-%m-%d')}\n")
              f.write(f"weekday_name={['월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일'][weekday]}\n")
          EOF

      - name: Collect articles and podcast episodes with full content analysis
        id: materials
        run: |
          python3 << 'EOF'
          import os
          import requests
          import feedparser
          from datetime import datetime
          import re
          from bs4 import BeautifulSoup
          from urllib.parse import urljoin
          import time

          def get_article_content(url):
              """실제 기사 URL에 접속해서 본문 내용을 가져오는 함수"""
              try:
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                  }
                  
                  response = requests.get(url, headers=headers, timeout=10)
                  response.raise_for_status()
                  response.encoding = 'utf-8'
                  
                  soup = BeautifulSoup(response.content, 'html.parser')
                  
                  # 사이트별 본문 추출 로직
                  content = ""
                  
                  if '20minutos.es' in url:
                      # 20minutos 본문 추출
                      article_body = soup.find('div', class_='article-text') or soup.find('div', class_='content')
                      if article_body:
                          paragraphs = article_body.find_all(['p', 'div'])
                          content = ' '.join([p.get_text().strip() for p in paragraphs if p.get_text().strip()])
                  
                  elif 'elpais.com' in url:
                      # El País 본문 추출
                      article_body = soup.find('div', {'data-dtm-region': 'articulo_cuerpo'}) or \
                                   soup.find('div', class_='a_c clearfix') or \
                                   soup.find('div', class_='articulo-cuerpo')
                      if article_body:
                          paragraphs = article_body.find_all('p')
                          content = ' '.join([p.get_text().strip() for p in paragraphs if p.get_text().strip()])
                  
                  # 일반적인 기사 본문 추출 (fallback)
                  if not content:
                      # 일반적인 article 태그나 main 태그에서 추출
                      article = soup.find('article') or soup.find('main')
                      if article:
                          paragraphs = article.find_all('p')
                          content = ' '.join([p.get_text().strip() for p in paragraphs if p.get_text().strip()][:10])  # 처음 10개 문단만
                  
                  # 내용이 너무 짧으면 다른 방법 시도
                  if len(content) < 200:
                      all_paragraphs = soup.find_all('p')
                      content = ' '.join([p.get_text().strip() for p in all_paragraphs if len(p.get_text().strip()) > 50][:8])
                  
                  return content[:2000]  # 처음 2000자만 반환
                  
              except Exception as e:
                  print(f"기사 내용 추출 오류: {e}")
                  return ""

          def extract_vocabulary_from_content(content, difficulty="B2"):
              """실제 기사 내용에서 학습자 수준에 맞는 핵심 어휘를 추출"""
              if not content:
                  return []
              
              # 수준별 어휘 추출 기준
              if difficulty == "B2":
                  # B2 수준: 중급 어휘, 일상적이지 않은 표현들
                  target_patterns = [
                      # 동사류
                      r'\b(desarrollar|establecer|implementar|generar|promover|fortalecer|consolidar|impulsar|fomentar|garantizar)\b',
                      # 명사류  
                      r'\b(iniciativa|propuesta|medida|estrategia|política|programa|proyecto|inversión|desarrollo|crecimiento)\b',
                      # 형용사류
                      r'\b(fundamental|esencial|crucial|significativo|relevante|considerable|notable|destacado|principal|prioritario)\b',
                      # 연결어
                      r'\b(además|asimismo|por tanto|sin embargo|no obstante|en consecuencia|por consiguiente|en definitiva)\b',
                      # 기관/조직 관련
                      r'\b(entidad|organismo|institución|administración|departamento|ministerio|ayuntamiento|comunidad)\b'
                  ]
              elif difficulty == "C1":
                  # C1 수준: 고급 어휘, 전문적/학술적 표현들
                  target_patterns = [
                      # 고급 동사
                      r'\b(implementar|consolidar|incrementar|optimizar|diversificar|potenciar|materializar|vehicular|canalizar)\b',
                      # 전문 명사
                      r'\b(sostenibilidad|competitividad|rentabilidad|eficiencia|transparencia|gobernanza|paradigma|metodología)\b',
                      # 고급 형용사
                      r'\b(innovador|sostenible|competitivo|eficiente|transparente|inclusivo|participativo|colaborativo)\b',
                      # 학술적 연결어
                      r'\b(en este sentido|cabe destacar|es preciso|conviene señalar|resulta evidente|se constata)\b',
                      # 전문 분야 용어
                      r'\b(digitalización|transformación|modernización|reestructuración|reconversión|reorientación)\b'
                  ]
              else:
                  # 기본 B2 패턴 사용
                  target_patterns = [
                      r'\b(desarrollar|establecer|implementar|medida|estrategia|fundamental|además|sin embargo)\b'
                  ]
              
              found_vocab = []
              content_lower = content.lower()
              
              # 어휘 추출 및 의미 매핑
              vocab_meanings = {
                  # B2 수준 어휘
                  'desarrollar': '개발하다, 발전시키다',
                  'establecer': '설립하다, 확립하다',
                  'implementar': '시행하다, 구현하다',
                  'generar': '생성하다, 만들어내다',
                  'promover': '촉진하다, 장려하다',
                  'fortalecer': '강화하다',
                  'consolidar': '통합하다, 견고히 하다',
                  'impulsar': '추진하다, 촉진하다',
                  'fomentar': '장려하다, 촉진하다',
                  'garantizar': '보장하다',
                  'iniciativa': '계획, 주도권',
                  'propuesta': '제안',
                  'medida': '조치, 대책',
                  'estrategia': '전략',
                  'política': '정책',
                  'programa': '프로그램',
                  'proyecto': '프로젝트',
                  'inversión': '투자',
                  'desarrollo': '발전, 개발',
                  'crecimiento': '성장',
                  'fundamental': '기본적인, 근본적인',
                  'esencial': '필수적인',
                  'crucial': '중요한, 결정적인',
                  'significativo': '의미있는, 중요한',
                  'relevante': '관련있는, 중요한',
                  'considerable': '상당한',
                  'notable': '주목할 만한',
                  'destacado': '뛰어난, 두드러진',
                  'principal': '주요한',
                  'prioritario': '우선적인',
                  'además': '게다가, 또한',
                  'asimismo': '마찬가지로',
                  'por tanto': '따라서',
                  'sin embargo': '그러나',
                  'no obstante': '그럼에도 불구하고',
                  'en consecuencia': '결과적으로',
                  'por consiguiente': '따라서',
                  'en definitiva': '결국',
                  'entidad': '기관, 단체',
                  'organismo': '기관, 조직',
                  'institución': '기관, 제도',
                  'administración': '행정부',
                  'departamento': '부서',
                  'ministerio': '부 (정부기관)',
                  'ayuntamiento': '시청',
                  'comunidad': '지역사회, 공동체',
                  
                  # C1 수준 어휘
                  'incrementar': '증가시키다',
                  'optimizar': '최적화하다',
                  'diversificar': '다양화하다',
                  'potenciar': '강화하다, 잠재력을 키우다',
                  'materializar': '실현하다',
                  'vehicular': '전달하다, 수단이 되다',
                  'canalizar': '경로를 제공하다',
                  'sostenibilidad': '지속가능성',
                  'competitividad': '경쟁력',
                  'rentabilidad': '수익성',
                  'eficiencia': '효율성',
                  'transparencia': '투명성',
                  'gobernanza': '거버넌스, 통치',
                  'paradigma': '패러다임',
                  'metodología': '방법론',
                  'innovador': '혁신적인',
                  'sostenible': '지속가능한',
                  'competitivo': '경쟁적인',
                  'eficiente': '효율적인',
                  'transparente': '투명한',
                  'inclusivo': '포용적인',
                  'participativo': '참여적인',
                  'colaborativo': '협력적인',
                  'digitalización': '디지털화',
                  'transformación': '변화, 변혁',
                  'modernización': '현대화',
                  'reestructuración': '구조조정',
                  'reconversión': '전환',
                  'reorientación': '방향 전환'
              }
              
              # 패턴 매칭으로 어휘 찾기
              for pattern in target_patterns:
                  matches = re.findall(pattern, content_lower, re.IGNORECASE)
                  for match in matches:
                      if match.lower() in vocab_meanings and match.lower() not in [v.split(' (')[0].lower() for v in found_vocab]:
                          meaning = vocab_meanings[match.lower()]
                          found_vocab.append(f"{match} ({meaning})")
              
              # 중복 제거 및 최대 5개 반환
              unique_vocab = []
              seen = set()
              for vocab in found_vocab:
                  word = vocab.split(' (')[0].lower()
                  if word not in seen:
                      unique_vocab.append(vocab)
                      seen.add(word)
                      if len(unique_vocab) >= 5:
                          break
              
              return unique_vocab

          def extract_category_from_content(title, content):
              """제목과 내용을 기반으로 카테고리 분류"""
              full_text = (title + " " + content).lower()
              
              keywords = {
                  '정치': ['gobierno', 'política', 'elecciones', 'parlamento', 'ministro', 'rey', 'presidente', 'votación', 'congreso'],
                  '경제': ['economía', 'banco', 'euro', 'empleo', 'crisis', 'mercado', 'dinero', 'trabajo', 'empresa', 'inversión'],
                  '사회': ['sociedad', 'educación', 'sanidad', 'vivienda', 'familia', 'salud', 'población', 'ciudadanos'],
                  '스포츠': ['fútbol', 'real madrid', 'barcelona', 'liga', 'deporte', 'partido', 'atletico', 'champions'],
                  '기술': ['tecnología', 'internet', 'móvil', 'digital', 'app', 'inteligencia', 'innovación'],
                  '문화': ['cultura', 'arte', 'música', 'teatro', 'festival', 'libro', 'cine', 'exposición'],
                  '국제': ['internacional', 'mundial', 'europa', 'américa', 'china', 'estados unidos', 'unión europea']
              }
              
              category_scores = {}
              for category, words in keywords.items():
                  score = sum(1 for word in words if word in full_text)
                  if score > 0:
                      category_scores[category] = score
              
              if category_scores:
                  return max(category_scores, key=category_scores.get)
              return '일반'

          def extract_episode_number(title):
              patterns = [
                  r'Ep\.?\s*(\d+)',
                  r'Episode\s*(\d+)',
                  r'#(\d+)',
                  r'(\d{3,4})'
              ]
              
              for pattern in patterns:
                  match = re.search(pattern, title, re.IGNORECASE)
                  if match:
                      return match.group(1)
              return None

          def extract_duration_from_feed(entry):
              # iTunes 듀레이션 먼저 확인
              if hasattr(entry, 'itunes_duration'):
                  duration = entry.itunes_duration
                  # 초 단위인 경우 분:초로 변환
                  if duration.isdigit():
                      total_seconds = int(duration)
                      minutes = total_seconds // 60
                      seconds = total_seconds % 60
                      return f"{minutes}:{seconds:02d}"
                  return duration
              
              # 요약에서 재생시간 추출 시도
              summary = entry.get('summary', '') + entry.get('description', '')
              duration_patterns = [
                  r'(\d+)\s*min',
                  r'(\d+)\s*분',
                  r'(\d+):(\d+)',
                  r'Duration:\s*(\d+)'
              ]
              
              for pattern in duration_patterns:
                  match = re.search(pattern, summary)
                  if match:
                      if ':' in pattern:
                          return f"{match.group(1)}:{match.group(2)}"
                      else:
                          return f"{match.group(1)}분"
              
              return "15-25분"

          def extract_topic_keywords(title, summary=""):
              content = (title + " " + summary).lower()
              
              topic_keywords = {
                  '문법': ['gramática', 'verbos', 'subjuntivo', 'pretérito', 'sintaxis'],
                  '문화': ['cultura', 'tradición', 'costumbres', 'historia', 'arte'],
                  '요리': ['cocina', 'comida', 'receta', 'gastronomía', 'plato'],
                  '여행': ['viajes', 'turismo', 'ciudades', 'lugares', 'destinos'],
                  '직업': ['trabajo', 'empleo', 'profesión', 'carrera', 'oficina'],
                  '가족': ['familia', 'padres', 'hijos', 'matrimonio', 'casa'],
                  '기술': ['tecnología', 'internet', 'móviles', 'digital', 'aplicaciones'],
                  '정치': ['política', 'gobierno', 'elecciones', 'democracia'],
                  '경제': ['economía', 'dinero', 'banco', 'trabajo', 'crisis', 'preferentes', 'ahorros'],
                  '사회': ['sociedad', 'gente', 'problemas', 'cambios', 'vida'],
                  '건강': ['salud', 'medicina', 'hospital', 'enfermedad', 'médico'],
                  '교육': ['educación', 'estudiantes', 'universidad', 'aprender']
              }
              
              for topic, keywords in topic_keywords.items():
                  if any(keyword in content for keyword in keywords):
                      return topic
              return '일반 주제'

          def create_detailed_memo(content_type, data, weekday_name):
              if content_type == "article":
                  category = data.get('category', '일반')
                  vocabulary = data.get('vocabulary', [])
                  difficulty = data.get('difficulty', 'B2')
                  
                  vocab_text = ""
                  if vocabulary:
                      vocab_list = ", ".join(vocabulary[:3])  # 처음 3개만 표시
                      vocab_text = f"📚 핵심 어휘: {vocab_list} "
                  
                  return (f"📰 {category} 분야 기사 ({difficulty} 수준) "
                         f"📅 발행: {data.get('published', '오늘')} "
                         f"🎯 학습목표: 15분 독해, {difficulty} 수준 어휘 정리 "
                         f"{vocab_text}"
                         f"📝 권장: 실제 기사 내용 분석을 통한 맞춤 어휘 학습")

              elif content_type == "podcast":
                  podcast_name = data.get('podcast_name', '')
                  duration = data.get('duration', '15-25분')
                  topic = data.get('topic', '일반 주제')
                  episode_num = data.get('episode_number', '')
                  
                  # 주제에 따른 학습목표 설정
                  learning_goals = {
                      '경제': '금융 어휘',
                      '정치': '정치 용어',
                      '문화': '문화 표현',
                      '사회': '사회 이슈 어휘',
                      '교육': '교육 관련 어휘',
                      '건강': '의료 용어',
                      '기술': '기술 용어',
                      '문법': '문법 구조'
                  }
                  goal = learning_goals.get(topic, '핵심 어휘')
                  
                  # 재생시간에 따른 청취 계획 설정
                  if ':' in duration:
                      try:
                          minutes, seconds = duration.split(':')
                          total_minutes = int(minutes)
                          if total_minutes > 30:
                              listen_plan = f"(30분 청취 목표)"
                          elif total_minutes > 20:
                              listen_plan = f"(전체 {duration} 청취)"
                          else:
                              listen_plan = f"(전체 {duration} 청취)"
                      except:
                          listen_plan = "(25분 청취 목표)"
                  else:
                      listen_plan = "(25분 청취 목표)"
                  
                  return (f"🎧 {podcast_name} Ep.{episode_num} - {weekday_name} 스페인 팟캐스트 "
                         f"⏱️ 재생시간: {duration} {listen_plan} "
                         f"🎯 학습목표: {goal} 5개 정리 "
                         f"🌍 주제: {topic} "
                         f"📝 권장: 핵심 어휘에 집중하여 청취")

          # 기사 수집 및 실제 내용 분석
          reading_source = "${{ steps.phase.outputs.reading_source }}"
          reading_difficulty = "${{ steps.phase.outputs.reading_difficulty }}"
          article_data = None

          try:
              if reading_source == "20minutos":
                  feed_url = "https://www.20minutos.es/rss/"
              elif "El País" in reading_source:
                  if "사설" in reading_source:
                      feed_url = "https://feeds.elpais.com/mrss-s/pages/ep/site/elpais.com/section/opinion"
                  else:
                      feed_url = "https://feeds.elpais.com/mrss-s/pages/ep/site/elpais.com/portada"
              
              print(f"RSS 피드에서 기사 정보 수집 중: {feed_url}")
              feed = feedparser.parse(feed_url)
              
              if feed.entries:
                  latest = feed.entries[0]
                  article_url = latest.link
                  clean_title = latest.title.replace('&quot;', '"').replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
                  
                  print(f"기사 URL 접속 중: {article_url}")
                  # 실제 기사 내용 가져오기
                  article_content = get_article_content(article_url)
                  
                  if article_content:
                      print(f"기사 내용 분석 중... (내용 길이: {len(article_content)}자)")
                      # 실제 내용에서 어휘 추출
                      vocabulary = extract_vocabulary_from_content(article_content, reading_difficulty)
                      category = extract_category_from_content(clean_title, article_content)
                      
                      print(f"추출된 어휘: {vocabulary}")
                      print(f"분류된 카테고리: {category}")
                      
                      article_data = {
                          'title': clean_title,
                          'url': article_url,
                          'published': latest.get('published', ''),
                          'category': category,
                          'vocabulary': vocabulary,
                          'difficulty': reading_difficulty,
                          'content_preview': article_content[:200] + "..." if len(article_content) > 200 else article_content
                      }
                  else:
                      print("기사 내용을 가져올 수 없어 RSS 요약 사용")
                      # 내용을 가져올 수 없으면 RSS 요약 사용
                      summary = latest.get('summary', '')
                      vocabulary = extract_vocabulary_from_content(summary, reading_difficulty)
                      category = extract_category_from_content(clean_title, summary)
                      
                      article_data = {
                          'title': clean_title,
                          'url': article_url,
                          'published': latest.get('published', ''),
                          'category': category,
                          'vocabulary': vocabulary,
                          'difficulty': reading_difficulty,
                          'content_preview': summary
                      }
                      
              else:
                  print("RSS 피드에서 기사를 찾을 수 없음")
                  
          except Exception as e:
              print(f"기사 수집 오류: {e}")

          # 팟캐스트 에피소드 수집
          podcast_rss = "${{ steps.phase.outputs.podcast_rss }}"
          podcast_name = "${{ steps.phase.outputs.podcast_name }}"
          weekday_name = "${{ steps.phase.outputs.weekday_name }}"
          podcast_data = None

          try:
              print(f"팟캐스트 RSS 피드 수집 중: {podcast_rss}")
              feed = feedparser.parse(podcast_rss)
              if feed.entries:
                  latest = feed.entries[0]
                  episode_number = extract_episode_number(latest.title)
                  duration = extract_duration_from_feed(latest)
                  topic = extract_topic_keywords(latest.title, latest.get('summary', ''))
                  
                  apple_base = "${{ steps.phase.outputs.podcast_apple_base }}"
                  episode_link = latest.link
                  
                  # Apple Podcasts 링크 생성 개선
                  if 'npr.org' in episode_link or 'radioambulante' in episode_link: