#!/usr/bin/env python3
"""
개선된 스페인어 학습 자료 자동화 시스템
- 정확한 기사 링크 추출
- 특정 팟캐스트 에피소드 제목 및 링크 제공
"""

import requests
import feedparser
import json
import re
from datetime import datetime
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class ImprovedSpanishAutomation:
    def __init__(self):
        self.notion_token = os.getenv('NOTION_TOKEN')
        self.database_id = os.getenv('NOTION_DATABASE_ID')
        self.headers = {
            "Authorization": f"Bearer {self.notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }

    def get_specific_20minutos_article(self) -> tuple:
        """20minutos에서 구체적인 기사 링크와 제목 추출"""
        try:
            # RSS 피드에서 최신 기사들 가져오기
            rss_url = "https://www.20minutos.es/rss/"
            feed = feedparser.parse(rss_url)
            
            if feed.entries:
                # 가장 최신 기사 선택
                latest_article = feed.entries[0]
                
                # 기사 내용 미리보기로 어휘 예측
                summary = latest_article.get('summary', '')
                category = self.extract_category_from_summary(summary)
                
                return {
                    'title': latest_article.title,
                    'url': latest_article.link,
                    'published': latest_article.get('published', ''),
                    'category': category,
                    'preview': summary[:200] + '...' if len(summary) > 200 else summary
                }
        except Exception as e:
            print(f"20minutos 기사 추출 오류: {e}")
            return None

    def extract_category_from_summary(self, summary: str) -> str:
        """기사 요약에서 카테고리 추출"""
        keywords = {
            '정치': ['gobierno', 'política', 'elecciones', 'parlamento', 'ministro'],
            '경제': ['economía', 'banco', 'euro', 'empleo', 'crisis', 'mercado'],
            '사회': ['sociedad', 'educación', 'sanidad', 'vivienda', 'familia'],
            '스포츠': ['fútbol', 'Real Madrid', 'Barcelona', 'Liga', 'deporte'],
            '기술': ['tecnología', 'internet', 'móvil', 'digital', 'app']
        }
        
        summary_lower = summary.lower()
        for category, words in keywords.items():
            if any(word in summary_lower for word in words):
                return category
        return '일반'

    def get_specific_podcast_episode(self, podcast_type: str) -> dict:
        """특정 팟캐스트의 최신 에피소드 정보 추출"""
        
        if podcast_type == "hoy_hablamos":
            return self.get_hoy_hablamos_episode()
        elif podcast_type == "radio_ambulante":
            return self.get_radio_ambulante_episode()
        elif podcast_type == "advanced_spanish":
            return self.get_advanced_spanish_episode()
        elif podcast_type == "dele_podcast":
            return self.get_dele_podcast_episode()
        
        return None

    def get_hoy_hablamos_episode(self) -> dict:
        """Hoy Hablamos 최신 에피소드"""
        try:
            # RSS 피드 또는 웹사이트 스크래핑
            rss_url = "https://feeds.feedburner.com/hoyhablamos"
            feed = feedparser.parse(rss_url)
            
            if feed.entries:
                latest = feed.entries[0]
                episode_number = self.extract_episode_number(latest.title)
                
                return {
                    'title': f"Hoy Hablamos Ep.{episode_number}: {latest.title}",
                    'url': latest.link,
                    'duration': self.extract_duration(latest.get('summary', '')),
                    'topic': self.extract_topic_keywords(latest.title),
                    'published': latest.get('published', ''),
                    'direct_play_url': self.get_direct_audio_url(latest.link)
                }
        except Exception as e:
            print(f"Hoy Hablamos 에피소드 추출 오류: {e}")
            # 폴백: 일반적인 정보 제공
            return {
                'title': "Hoy Hablamos - 최신 일일 에피소드",
                'url': "https://www.hoyhablamos.com/",
                'topic': "스페인 일상 주제",
                'instruction': "웹사이트에서 가장 최신 에피소드를 선택하세요"
            }

    def get_radio_ambulante_episode(self) -> dict:
        """Radio Ambulante 최신 에피소드"""
        try:
            # NPR RSS 피드 사용
            rss_url = "https://feeds.npr.org/510311/podcast.xml"
            feed = feedparser.parse(rss_url)
            
            if feed.entries:
                latest = feed.entries[0]
                
                return {
                    'title': f"Radio Ambulante: {latest.title}",
                    'url': latest.link,
                    'duration': self.extract_duration_from_itunes(latest),
                    'country': self.extract_country_from_title(latest.title),
                    'published': latest.get('published', ''),
                    'apple_url': f"https://podcasts.apple.com/podcast/radio-ambulante/id527614348?i={self.extract_episode_id(latest.link)}"
                }
        except Exception as e:
            print(f"Radio Ambulante 에피소드 추출 오류: {e}")
            return {
                'title': "Radio Ambulante - 최신 라틴아메리카 스토리",
                'url': "https://radioambulante.org/",
                'instruction': "Apple Podcasts에서 가장 최신 에피소드를 선택하세요"
            }

    def get_advanced_spanish_episode(self) -> dict:
        """Advanced Spanish Podcast 최신 에피소드"""
        try:
            # Spanish Language Coach 웹사이트 스크래핑
            url = "https://www.spanishlanguagecoach.com/podcast/"
            response = requests.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # 최신 에피소드 찾기
            latest_episode = soup.find('article', class_='post')
            if latest_episode:
                title = latest_episode.find('h2').text.strip()
                episode_url = latest_episode.find('a')['href']
                
                return {
                    'title': f"Advanced Spanish: {title}",
                    'url': episode_url,
                    'level': 'C1',
                    'has_transcript': True,
                    'has_flashcards': True,
                    'apple_url': "https://podcasts.apple.com/kr/podcast/advanced-spanish-podcast-español-avanzado/id1632291264"
                }
        except Exception as e:
            print(f"Advanced Spanish 에피소드 추출 오류: {e}")
            return {
                'title': "Advanced Spanish - 최신 고급 대화",
                'url': "https://www.spanishlanguagecoach.com/podcast/",
                'instruction': "웹사이트에서 최신 에피소드를 확인하세요"
            }

    def extract_episode_number(self, title: str) -> str:
        """제목에서 에피소드 번호 추출"""
        match = re.search(r'(\d+)', title)
        return match.group(1) if match else 'Latest'

    def extract_duration(self, summary: str) -> str:
        """요약에서 재생시간 추출"""
        duration_match = re.search(r'(\d+)\s*min', summary)
        return f"{duration_match.group(1)}분" if duration_match else "약 15-25분"

    def extract_topic_keywords(self, title: str) -> str:
        """제목에서 주제 키워드 추출"""
        # 일반적인 주제 키워드 매핑
        topic_map = {
            'gramática': '문법',
            'cultura': '문화', 
            'historia': '역사',
            'cocina': '요리',
            'viajes': '여행',
            'trabajo': '직업',
            'familia': '가족',
            'tecnología': '기술'
        }
        
        title_lower = title.lower()
        for spanish, korean in topic_map.items():
            if spanish in title_lower:
                return korean
        return '일반 주제'

    def create_detailed_memo(self, content_type: str, data: dict) -> str:
        """상세한 메모 생성"""
        if content_type == "article":
            return f"""📰 {data.get('category', '일반')} 분야 기사
📅 발행: {data.get('published', '오늘')}
🎯 학습목표: 15분 독해, 어휘 5개 정리
💡 미리보기: {data.get('preview', '')}
📝 권장: 모르는 단어는 노트에 정리하며 읽기"""

        elif content_type == "podcast":
            return f"""🎧 {data.get('title', '')}
⏱️ 재생시간: {data.get('duration', '15-25분')}
🎯 학습목표: 25분 청취, 표현 5개 정리
🌍 지역: {data.get('country', '스페인/중남미')}
📝 권장: {data.get('instruction', '전사본 활용하여 반복 청취')}"""

    def add_to_notion_with_specific_links(self, article_data: dict, podcast_data: dict):
        """구체적인 링크와 함께 Notion DB 업데이트"""
        today = datetime.now().strftime("%Y-%m-%d")
        
        # 독해 자료 추가 (실제 기사 링크)
        if article_data:
            reading_payload = {
                "parent": {"database_id": self.database_id},
                "properties": {
                    "내용": {"title": [{"text": {"content": f"[{today}] {article_data['title']}"}}]},
                    "URL": {"url": article_data['url']},  # 실제 기사 링크
                    "날짜": {"date": {"start": today}},
                    "지역": {"select": {"name": "스페인"}},
                    "난이도": {"select": {"name": "B2"}},
                    "자료 유형": {"select": {"name": "기사/뉴스"}},
                    "학습 영역": {"select": {"name": "독해"}},
                    "메모": {"rich_text": [{"text": {"content": self.create_detailed_memo("article", article_data)}}]}
                }
            }
            
            self.send_to_notion(reading_payload, "독해 자료")

        # 청해 자료 추가 (구체적인 에피소드 링크)
        if podcast_data:
            podcast_payload = {
                "parent": {"database_id": self.database_id},
                "properties": {
                    "내용": {"title": [{"text": {"content": f"[{today}] {podcast_data['title']}"}}]},
                    "URL": {"url": podcast_data.get('apple_url', podcast_data['url'])},  # Apple Podcasts 직접 링크 우선
                    "날짜": {"date": {"start": today}},
                    "지역": {"select": {"name": podcast_data.get('region', '스페인')}},
                    "난이도": {"select": {"name": "C1"}},
                    "자료 유형": {"select": {"name": "팟캐스트"}},
                    "학습 영역": {"select": {"name": "청해"}},
                    "메모": {"rich_text": [{"text": {"content": self.create_detailed_memo("podcast", podcast_data)}}]}
                }
            }
            
            self.send_to_notion(podcast_payload, "청해 자료")

    def send_to_notion(self, payload: dict, content_type: str):
        """Notion API 전송"""
        try:
            response = requests.post(
                "https://api.notion.com/v1/pages",
                headers=self.headers,
                json=payload
            )
            if response.status_code == 200:
                print(f"✅ {content_type} 추가 성공!")
            else:
                print(f"❌ {content_type} 추가 실패: {response.text}")
        except Exception as e:
            print(f"{content_type} 전송 오류: {e}")

# 실행 예시
def main():
    automation = ImprovedSpanishAutomation()
    
    # 실제 기사와 에피소드 수집
    article_data = automation.get_specific_20minutos_article()
    podcast_data = automation.get_specific_podcast_episode("hoy_hablamos")  # 월요일
    
    # Notion DB에 구체적인 링크와 함께 추가
    automation.add_to_notion_with_specific_links(article_data, podcast_data)

if __name__ == "__main__":
    main()